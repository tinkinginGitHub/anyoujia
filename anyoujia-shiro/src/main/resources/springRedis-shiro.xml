<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd">

      <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
                 <property name="maxTotal" value="${redis.maxTotal}" />
                <property name="maxIdle" value="${redis.maxIdle}" />
                 <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
                 <!-- <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" /> -->
             </bean>
         <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
             <property name="hostName" value="${redis.host}" />
             <property name="port" value="${redis.port}" />
             <property name="timeout" value="${redis.timeout}" />
             <property name="password" value="${redis.pass}" />
             <property name="poolConfig" ref="jedisPoolConfig" />
        </bean>
    <bean id="template" class="org.springframework.data.redis.core.RedisTemplate">
                <property name="connectionFactory" ref="jedisConnectionFactory" />
                <!-- 开启事务 -->
                <property name="enableTransactionSupport" value="true" />
                 <property name="keySerializer">
                    <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
                 </property>
                 <property name="valueSerializer">
                     <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
                 </property>
                 <property name="hashKeySerializer">
                     <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
                 </property>
                 <property name="hashValueSerializer">
                    <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
                 </property>
            </bean>
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"
          c:redisOperations-ref="template">
             <!-- 默认缓存10分钟 -->
            <property name="defaultExpiration" value="6000"/>
             <property name="usePrefix" value="true"/>
            <!-- cacheName 缓存超时配置，半小时，一小时，一天 -->
             <property name="expires">
                 <map key-type="java.lang.String" value-type="java.lang.Long">
                     <entry key="halfHour" value="1800"/>
                     <entry key="hour" value="3600"/>
                     <entry key="oneDay" value="86400"/>
                     <!-- shiro cache keys 对缓存的配置 -->
                    <entry key="authorizationCache" value="18000"/>
                     <entry key="authenticationCache" value="32000"/>
                     <entry key="activeSessionCache" value="18000"/>
                 </map>
             </property>
         </bean>
    <bean id="jedisCacheManager" class="cn.anyoufang.cache.JedisCacheManager">
        <property name="cacheManager" ref="cacheManager"/>
    </bean>
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的MemberRealm.java -->
	<bean id="userRealm" class="cn.anyoufang.shiro.realm.MemberRealm">
		<property name="authenticationCachingEnabled" value="true"/>
		<property name="cachingEnabled" value="true"/>
		<!--<property name="cacheManager" ref="jedisCacheManager"/>-->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"></property> <!-- 加密算法的名称 -->
            </bean>
        </property>
	</bean>
    <!--<bean id="userRealm" class="cn.anyoufang.shiro.UserRealm"/>-->
    <!-- redis集群 -->
    <!-- <bean id="jedisCluster" class="redis.clients.jedis.JedisCluster">
        <constructor-arg>
            <set>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="192.168.25.153"/>
                    <constructor-arg name="port" value="7001"/>
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="192.168.25.153"/>
                    <constructor-arg name="port" value="7002"/>
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="192.168.25.153"/>
                    <constructor-arg name="port" value="7003"/>
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="192.168.25.153"/>
                    <constructor-arg name="port" value="7004"/>
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="192.168.25.153"/>
                    <constructor-arg name="port" value="7005"/>
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="192.168.25.153"/>
                    <constructor-arg name="port" value="7006"/>
                </bean>
            </set>
        </constructor-arg>
    </bean>
    <bean id="jedisClientCluster" class=""/> -->
    <!--<bean id="sessionDao" class="cn.anyoufang.shiro.dao.SessionDao"/>-->
	<bean id="sessionManager" class="cn.anyoufang.shiro.StatelessSessionManager">
		<!-- 设置session过期时间为1小时(单位：毫秒)，默认为30分钟 -->
		<property name="globalSessionTimeout" value="3600000"/>
        <!--<property name="sessionDAO" ref="sessionDao"/>-->
		<property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationInterval" value="30000" />
        <property name="sessionIdUrlRewritingEnabled" value="false"/>
        <property name="sessionListeners">
            <list>
                <bean id="myShiroSessionListener" class="cn.anyoufang.shiro.listener.MyShiroSessionListener"/>
            </list>
        </property>
	</bean>
    <!-- 用户信息记住我功能的相关配置 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="v_v-re-baidu"/>
        <property name="httpOnly" value="true"/>
         <!--配置存储rememberMe Cookie的domain为 一级域名-->
        <property name="domain" value=".anyoujia.com"/>

        <property name="maxAge" value="${rememberMe}"/><!-- 7天时间，记住我7天 -->
    </bean>
    <bean id ="rememberManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('3AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
	
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="sessionManager" ref="sessionManager"></property>
		<property name="cacheManager" ref="jedisCacheManager"></property>
        <property name="rememberMeManager" ref="rememberManager"></property>
	    <property name="realm" ref="userRealm"/>
	</bean>

	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	    <!-- Shiro的核心安全接口,这个属性是必须的 -->  
	    <property name="securityManager" ref="securityManager"/>  
	    <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.html"页面 -->
        <property name="loginUrl" value="/login.html"/>
	    <!-- 登录成功后要跳转的连接 -->  
	    <property name="successUrl" value="/index.html"/>
	    <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
	    <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->  
	    <property name="unauthorizedUrl" value="/"/>
	    <!-- Shiro连接约束配置,即过滤链的定义 -->  
	    <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
	    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
	    <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
	    <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
	    <property name="filterChainDefinitions">
            <value>

	        </value>
	    </property>
	</bean>
	
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!-- AOP式方法级权限检查  -->
    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <!--属性默认为false,设置为true时如果目标类是接口将会使用基于的JDK的动态代理，如果是其他类将会强制使用基于CGLIB的动态代理-->
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
</beans>