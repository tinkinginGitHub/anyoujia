<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
  http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
  version="3.1"  metadata-complete="false">
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:spring-mvc.xml
			classpath:spring-dao.xml
			classpath:springRedis-shiro.xml
		</param-value>
	</context-param>

	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>600000</param-value>
	</context-param>
	
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>webPath</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.WebAppRootListener</listener-class>
	</listener>
	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->  
	<!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->  
	<!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->  
	<!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 --> 
	<filter>
	    <filter-name>shiroFilter</filter-name>
	    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	    <init-param>
	    	<!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由servlet container管理 -->
	        <param-name>targetFilterLifecycle</param-name>
	        <param-value>true</param-value>
	    </init-param>
	</filter>
	
	<filter-mapping>
	    <filter-name>shiroFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>xssFilter</filter-name>
		<filter-class>cn.anyoufang.xss.XssFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>xssFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

    <!-- 用来过滤rest中的方法，在隐藏域中的put/delete方式,注意 由于执行顺序原因  一定要放在编码过滤器下面，否则会出现编码问题 -->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
        <init-param>
            <param-name>methodParam</param-name>
            <!--这个_method 一定是同隐藏域name值相同-->
            <param-value>_method</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--激活Tomcat默认的servlet来处理静态文件，配置时需要配置在dispatcherServlet前面-->
    <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.png</url-pattern>
    </servlet-mapping>
    
    <servlet-mapping>
      <servlet-name>default</servlet-name>
    <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    
    <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    
	<servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
	<!--<url-pattern>/</url-pattern>会匹配到/login这样的路径型url，不会匹配到模式为*.jsp这样的后缀型url
	    <url-pattern>/*</url-pattern>除了会匹配到/login这样的路径型url,还会匹配到*.jsp这样的后缀型url
	-->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

    <!--<servlet-mapping>
      <servlet-name>DruidStatView</servlet-name>
      <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>-->

	<!--<welcome-file-list><welcome-file>/pages/index.html</welcome-file></welcome-file-list>-->
	<!-- 404 数据不存在 -->
	<!--<error-page>
		<error-code>400</error-code>
		<location>404.html</location>
	</error-page>

	&lt;!&ndash; 404 页面找不到 &ndash;&gt;
	<error-page>
		<error-code>404</error-code>
		<location>404.html</location>
	</error-page>

	&lt;!&ndash; 500 服务器内部错误 &ndash;&gt;
	<error-page>
		<error-code>500</error-code>
		<location>/pages/404.html</location>
	</error-page>-->
</web-app>
